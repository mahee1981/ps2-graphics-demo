diff --git a/project/Makefile b/project/Makefile
index f8c40f9..a568716 100644
--- a/project/Makefile
+++ b/project/Makefile
@@ -8,6 +8,11 @@ EE_OBJS = bin/AlphaTest.o bin/Color.o bin/main.o $(VU0_MATH_OBJS) $(GRAPHICS_OBJ
 EE_LIBS = -ldraw -lgraph -ldma -lpacket -lpacket2 -ldebug -lpad 
 EE_INCS = -Iinclude -Iexternal
 
+ISO_TGT = bin/game.iso
+
+RESOURCES = resources
+
+
 all: output-dirs $(EE_BIN)
 	cp resources/brick_wall_128.png bin/
 
@@ -16,13 +21,21 @@ output-dirs:
 	mkdir -p bin/graphics
 	mkdir -p bin/input
 	mkdir -p bin/VU0Math
+
+
 	
+iso: $(EE_BIN)
+	mkisofs -l -o $(ISO_TGT) $(EE_BIN) SYSTEM.CNF $(RESOURCES) 
+
 clean:
 	rm -rf $(EE_BIN) $(EE_OBJS)
 
-emulate:  $(EE_BIN)
+emulate-elf:  $(EE_BIN)
 	pcsx2.AppImage $(EE_BIN)
 
+emulate-iso: iso 
+	pcsx2.AppImage $(ISO_TGT)
+
 run: $(EE_BIN)
 	ps2client execee host:$(EE_BIN)
 
diff --git a/project/include/graphics/texture.hpp b/project/include/graphics/texture.hpp
index 395315b..6dedd89 100644
--- a/project/include/graphics/texture.hpp
+++ b/project/include/graphics/texture.hpp
@@ -22,6 +22,7 @@ namespace graphics {
     {
         public:
             Texture(const char* pathToImg);
+            Texture(std::string pathToImg);
             ~Texture();
             void LoadTexture();
             int AllocateVram();
diff --git a/project/main.cpp b/project/main.cpp
index 23b6aba..240605b 100644
--- a/project/main.cpp
+++ b/project/main.cpp
@@ -79,34 +79,35 @@ void PrepareTriangleDisplayList(packet2_t *dmaBuffer, float angle, float moveHor
 
   // Data is to be stored in an obj file that has coordinates, color and texutures as Vec4, so that we get a qword alignment"
   std::vector<float> vertexData{
-      10.00f, 10.00f, 10.00f, 1.00f, 1.00f, 0.00f, 0.00f, 1.00f, 0.00f, 0.00f, 0.00f, 0.00f,
-      10.00f, 10.00f, -10.00f, 1.00f, 1.00f, 0.00f, 0.00f, 1.00f, 1.00f, 0.00f, 0.00f, 0.00f,
-      10.00f, -10.00f, 10.00f, 1.00f, 1.00f, 0.00f, 0.00f, 1.00f, 0.00f, 1.00f, 0.00f, 0.00f,
-      10.00f, -10.00f, -10.00f, 1.00f, 1.00f, 0.00f, 0.00f, 1.00f, 1.00f, 1.00f, 0.00f, 0.00f,
-      -10.00f, 10.00f, 10.00f, 1.00f, 1.00f, 0.00f, 0.00f, 1.00f, 0.00f, 0.00f, 0.00f, 0.00f,
-      -10.00f, 10.00f, -10.00f, 1.00f, 1.00f, 0.00f, 0.00f, 1.00f, 1.00f, 0.00f, 0.00f, 0.00f,
-      -10.00f, -10.00f, 10.00f, 1.00f, 1.00f, 0.00f, 0.00f, 1.00f, 0.00f, 1.00f, 0.00f, 0.00f,
-      -10.00f, -10.00f, -10.00f, 1.00f, 1.00f, 0.00f, 0.00f, 1.00f, 1.00f, 1.00f, 0.00f, 0.00f,
-      -10.00f, 10.00f, 10.00f, 1.00f, 0.00f, 1.00f, 0.00f, 1.00f, 0.00f, 0.00f, 0.00f, 0.00f,
-      10.00f, 10.00f, 10.00f, 1.00f, 0.00f, 1.00f, 0.00f, 1.00f, 1.00f, 0.00f, 0.00f, 0.00f,
-      -10.00f, 10.00f, -10.00f, 1.00f, 0.00f, 1.00f, 0.00f, 1.00f, 0.00f, 1.00f, 0.00f, 0.00f,
-      10.00f, 10.00f, -10.00f, 1.00f, 0.00f, 1.00f, 0.00f, 1.00f, 1.00f, 1.00f, 0.00f, 0.00f,
-      -10.00f, -10.00f, 10.00f, 1.00f, 0.00f, 1.00f, 0.00f, 1.00f, 0.00f, 0.00f, 0.00f, 0.00f,
-      10.00f, -10.00f, 10.00f, 1.00f, 0.00f, 1.00f, 0.00f, 1.00f, 1.00f, 0.00f, 0.00f, 0.00f,
-      -10.00f, -10.00f, -10.00f, 1.00f, 0.00f, 1.00f, 0.00f, 1.00f, 0.00f, 1.00f, 0.00f, 0.00f,
-      10.00f, -10.00f, -10.00f, 1.00f, 0.00f, 1.00f, 0.00f, 1.00f, 1.00f, 1.00f, 0.00f, 0.00f,
-      -10.00f, 10.00f, 10.00f, 1.00f, 0.00f, 0.00f, 1.00f, 1.00f, 0.00f, 0.00f, 0.00f, 0.00f,
-      10.00f, 10.00f, 10.00f, 1.00f, 0.00f, 0.00f, 1.00f, 1.00f, 1.00f, 0.00f, 0.00f, 0.00f,
-      -10.00f, -10.00f, 10.00f, 1.00f, 0.00f, 0.00f, 1.00f, 1.00f, 0.00f, 1.00f, 0.00f, 0.00f,
-      10.00f, -10.00f, 10.00f, 1.00f, 0.00f, 0.00f, 1.00f, 1.00f, 1.00f, 1.00f, 0.00f, 0.00f,
-      -10.00f, 10.00f, -10.00f, 1.00f, 0.00f, 0.00f, 1.00f, 1.00f, 0.00f, 0.00f, 0.00f, 0.00f,
-      10.00f, 10.00f, -10.00f, 1.00f, 0.00f, 0.00f, 1.00f, 1.00f, 1.00f, 0.00f, 0.00f, 0.00f,
-      -10.00f, -10.00f, -10.00f, 1.00f, 0.00f, 0.00f, 1.00f, 1.00f, 0.00f, 1.00f, 0.00f, 0.00f,
-      10.00f, -10.00f, -10.00f, 1.00f, 0.00f, 0.00f, 1.00f, 1.00f, 1.00f, 1.00f, 0.00f, 0.00f
+      10.00f, 10.00f, 10.00f, 1.00f, 1.00f, 0.00f, 0.00f, 0.50f, 0.00f, 0.00f, 0.00f, 0.00f,
+      10.00f, 10.00f, -10.00f, 1.00f, 1.00f, 0.00f, 0.00f, 0.50f, 1.00f, 0.00f, 0.00f, 0.00f,
+      10.00f, -10.00f, 10.00f, 1.00f, 1.00f, 0.00f, 0.00f, 0.50f, 0.00f, 1.00f, 0.00f, 0.00f,
+      10.00f, -10.00f, -10.00f, 1.00f, 1.00f, 0.00f, 0.00f, 0.50f, 1.00f, 1.00f, 0.00f, 0.00f,
+      -10.00f, 10.00f, 10.00f, 1.00f, 1.00f, 0.00f, 0.00f, 0.50f, 0.00f, 0.00f, 0.00f, 0.00f,
+      -10.00f, 10.00f, -10.00f, 1.00f, 1.00f, 0.00f, 0.00f, 0.50f, 1.00f, 0.00f, 0.00f, 0.00f,
+      -10.00f, -10.00f, 10.00f, 1.00f, 1.00f, 0.00f, 0.00f, 0.50f, 0.00f, 1.00f, 0.00f, 0.00f,
+      -10.00f, -10.00f, -10.00f, 1.00f, 1.00f, 0.00f, 0.00f, 0.50f, 1.00f, 1.00f, 0.00f, 0.00f,
+      -10.00f, 10.00f, 10.00f, 1.00f, 0.00f, 1.00f, 0.00f, 0.50f, 0.00f, 0.00f, 0.00f, 0.00f,
+      10.00f, 10.00f, 10.00f, 1.00f, 0.00f, 1.00f, 0.00f, 0.50f, 1.00f, 0.00f, 0.00f, 0.00f,
+      -10.00f, 10.00f, -10.00f, 1.00f, 0.00f, 1.00f, 0.00f, 0.50f, 0.00f, 1.00f, 0.00f, 0.00f,
+      10.00f, 10.00f, -10.00f, 1.00f, 0.00f, 1.00f, 0.00f, 0.50f, 1.00f, 1.00f, 0.00f, 0.00f,
+      -10.00f, -10.00f, 10.00f, 1.00f, 0.00f, 1.00f, 0.00f, 0.50f, 0.00f, 0.00f, 0.00f, 0.00f,
+      10.00f, -10.00f, 10.00f, 1.00f, 0.00f, 1.00f, 0.00f, 0.50f, 1.00f, 0.00f, 0.00f, 0.00f,
+      -10.00f, -10.00f, -10.00f, 1.00f, 0.00f, 1.00f, 0.00f, 0.50f, 0.00f, 1.00f, 0.00f, 0.00f,
+      10.00f, -10.00f, -10.00f, 1.00f, 0.00f, 1.00f, 0.00f, 0.50f, 1.00f, 1.00f, 0.00f, 0.00f,
+      -10.00f, 10.00f, 10.00f, 1.00f, 0.00f, 0.00f, 1.00f, 0.50f, 0.00f, 0.00f, 0.00f, 0.00f,
+      10.00f, 10.00f, 10.00f, 1.00f, 0.00f, 0.00f, 1.00f, 0.50f, 1.00f, 0.00f, 0.00f, 0.00f,
+      -10.00f, -10.00f, 10.00f, 1.00f, 0.00f, 0.00f, 1.00f, 0.50f, 0.00f, 1.00f, 0.00f, 0.00f,
+      10.00f, -10.00f, 10.00f, 1.00f, 0.00f, 0.00f, 1.00f, 0.50f, 1.00f, 1.00f, 0.00f, 0.00f,
+      -10.00f, 10.00f, -10.00f, 1.00f, 0.00f, 0.00f, 1.00f, 0.50f, 0.00f, 0.00f, 0.00f, 0.00f,
+      10.00f, 10.00f, -10.00f, 1.00f, 0.00f, 0.00f, 1.00f, 0.50f, 1.00f, 0.00f, 0.00f, 0.00f,
+      -10.00f, -10.00f, -10.00f, 1.00f, 0.00f, 0.00f, 1.00f, 0.50f, 0.00f, 1.00f, 0.00f, 0.00f,
+      10.00f, -10.00f, -10.00f, 1.00f, 0.00f, 0.00f, 1.00f, 0.50f, 1.00f, 1.00f, 0.00f, 0.00f
 
   };
 
-  std::vector<unsigned int> indices{
+  std::vector<unsigned int> indices
+  {
       0, 1, 2,
       1, 2, 3,
       4, 6, 5,
@@ -118,7 +119,8 @@ void PrepareTriangleDisplayList(packet2_t *dmaBuffer, float angle, float moveHor
       16, 17, 18,
       17, 18, 19,
       20, 21, 22,
-      21, 22, 23};
+      21, 22, 23
+  };
   // constexpr std::size_t vertexDataOffset = 0;
   constexpr std::size_t colorOffset = 4;
 
@@ -128,16 +130,17 @@ void PrepareTriangleDisplayList(packet2_t *dmaBuffer, float angle, float moveHor
   constexpr std::size_t alphaColorOffset = colorOffset + 3;
 
   constexpr std::size_t uCoordinateOffset = 8;
-  constexpr std::size_t vCoordinateOffset = 9;
   constexpr std::size_t step = 12;
 
+  constexpr texel_t zeroTexel = { .u = 0.0f, .v = 0.0f};
+
   qword_t qword;
   const unsigned int numberOfTimesGifTagExecutes = (indices.size() + 1) / 3;
   // 0xB = draw triangle and use Gouraud to get the color interpolation
-  qword.dw[0] = (u64)GIF_SET_TAG(numberOfTimesGifTagExecutes, false, true, 0x1B, GIF_FLG_PACKED, 9);
+  qword.dw[0] = (u64)GIF_SET_TAG(numberOfTimesGifTagExecutes, false, true, 0x5B, GIF_FLG_PACKED, 9);
   constexpr u64 triangleGIFTag = u64(GIF_REG_XYZ2) << 32 | u64(GIF_REG_RGBAQ) << 28 | u64(GIF_REG_ST) << 24 |
                                  u64(GIF_REG_XYZ2) << 20 | u64(GIF_REG_RGBAQ) << 16 | u64(GIF_REG_ST) << 12 |
-                                 u64(GIF_REG_XYZ2) << 8 | u64(GIF_REG_RGBAQ) << 4 | u64(GIF_REG_ST);
+                                 u64(GIF_REG_XYZ2) << 8  | u64(GIF_REG_RGBAQ) << 4  | u64(GIF_REG_ST);
 
   // const unsigned int numberOfTimesGifTagExecutes = indices.size();
 
@@ -149,13 +152,13 @@ void PrepareTriangleDisplayList(packet2_t *dmaBuffer, float angle, float moveHor
   packet2_add_u128(dmaBuffer, qword.qw);
 
   ps2math::Vec4 scaleFactor = ps2math::Vec4(0.5f, 0.5f, 0.5f, 1.0f);
-  ps2math::Mat4 perspectiveMatrix = ps2math::Mat4::perspective(ToRadians(60.0f), (float)width / (float)height, 1.0f, 2000.0f);
+  ps2math::Mat4 perspectiveMatrix = ps2math::Mat4::perspective(ToRadians(45.0f), (float)width / (float)height, 1.0f, 2000.0f);
 
   for (std::size_t i = 0; i < indices.size(); i++)
   {
 
     u64 textureData = (*(reinterpret_cast<texel_t *>(vertexData.data() + step * indices[i] + uCoordinateOffset))).uv;
-    u64 otherData = (*(reinterpret_cast<texel_t *>(vertexData.data() + step * indices[i] + uCoordinateOffset + 2))).uv;
+    u64 otherData = zeroTexel.uv;
 
     qword.dw[0] = textureData;
     qword.dw[1] = otherData;
@@ -168,7 +171,7 @@ void PrepareTriangleDisplayList(packet2_t *dmaBuffer, float angle, float moveHor
 
     // color
     qword.dw[0] = (u64(vertexData[step * indices[i] + blueColorOffset] * 255.0f) & 0xFF) << 32 | (u64(vertexData[step * indices[i] + redColorOffset] * 255.0f) & 0xFF);
-    qword.dw[1] = (u64(0x10) & 0xFF) << 32 | (u64(vertexData[step * indices[i] + greenColorOffset] * 255.0f) & 0xFF);
+    qword.dw[1] = (u64(vertexData[step * indices[i] + alphaColorOffset] * 0x80) & 0xFF) << 32 | (u64(vertexData[step * indices[i] + greenColorOffset] * 255.0f) & 0xFF);
     packet2_add_u128(dmaBuffer, qword.qw);
 
     // this copy is gonna be a performance killer, will not happen on VU1, but guarantees that it is 128-bit aligned
@@ -261,7 +264,7 @@ void render()
   PadManager controllerInput;
   float moveHorizontal = 0.0f;
 
-  graphics::Texture myTex("host:brick_wall_128.png");
+  graphics::Texture myTex("host:max8bit256.bmp");
 
   myTex.LoadTexture();
   myTex.AllocateVram();
diff --git a/project/src/graphics/GSbuffer.cpp b/project/src/graphics/GSbuffer.cpp
index f2ee340..007e498 100644
--- a/project/src/graphics/GSbuffer.cpp
+++ b/project/src/graphics/GSbuffer.cpp
@@ -2,12 +2,12 @@
 
 namespace Buffers
 {
-    GSbuffer::GSbuffer() : IDisposable(),  width(640), height(480), mask(0), address(0)
+    GSbuffer::GSbuffer() : IDisposable(), width(640), height(480), mask(0), address(0)
     {
-        
     }
 
-    GSbuffer::GSbuffer(unsigned int width, unsigned int height, unsigned int mask) : IDisposable(), width(width), height(height), mask(mask), address(0)
+    GSbuffer::GSbuffer(unsigned int width, unsigned int height, unsigned int mask)
+        : IDisposable(), width(width), height(height), mask(mask), address(0)
     {
     }
 
@@ -31,11 +31,11 @@ namespace Buffers
     }
     void GSbuffer::Dispose()
     {
-        if(!disposed)
+        if (!disposed)
         {
             printf("Freed Memory!\n");
             // sleep(2);
-            if(address)
+            if (address)
                 graph_vram_free(address);
             disposed = true;
         }
diff --git a/project/src/graphics/texture.cpp b/project/src/graphics/texture.cpp
index 5db2fde..99b1fdd 100644
--- a/project/src/graphics/texture.cpp
+++ b/project/src/graphics/texture.cpp
@@ -8,6 +8,11 @@ namespace graphics
     {
     }
 
+    Texture::Texture(std::string pathToImg)
+            : imgPath(pathToImg), imageData(nullptr), width(0), height(0), nrChannels(0), gsTextureBuffer(nullptr)
+    {
+    }
+
     Texture::~Texture()
     {
     }
@@ -162,7 +167,7 @@ namespace graphics
                       ((u64(draw_log2(width)) & 0xf) << 26) |
                       ((u64(draw_log2(height)) & 0xf) << 30) |
                       ((u64(0) & 0x1) << 34) | // RGB or RGBA
-                      ((u64(1) & 0x3) << 35) | 0;
+                      ((u64(0) & 0x3) << 35) | 0; // 0 -> Modulate, 1 -> Decal
         qword.dw[1] = GS_REG_TEX0_1;
         packet2_add_u128(normal_packet.get(), qword.qw);
         
